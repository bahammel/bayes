[ins] In [1]: %run ../bays_trial_scripts/GDP_bays.py                                                                                                                                                                              
[iteration 0050] loss: 3265.2349
[iteration 1000] loss: 147.8943
Learned parameters:
factor 0.38343468
linear.weight [[-1.9271289  -0.19522373]]
linear.bias [9.207214]
[iteration 0001] loss: 4.3707
[iteration 0901] loss: 1.4787
auto_loc tensor([-2.2822,  0.4035, -1.7951, -0.1479,  9.1921], requires_grad=True)
auto_scale tensor([0.0902, 0.0854, 0.1350, 0.0473, 0.0819], grad_fn=<AddBackward0>)

[ins] In [2]: x_data[:, 0]                                                                                                                                                                                                        
Out[2]: 
tensor([1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 1., 1., 1.,
        1., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1.])
[ins] In [3]: x_data[:, 1]                                                                                                                                                                                                        
Out[3]: 
tensor([8.5800e-01, 3.4270e+00, 7.6900e-01, 7.7500e-01, 2.6880e+00, 6.0000e-03,
        1.4300e-01, 3.5130e+00, 1.6720e+00, 1.7800e+00, 3.8800e-01, 1.4100e-01,
        2.3600e-01, 1.8600e-01, 1.4790e+00, 2.3100e-01, 5.5000e-02, 2.3110e+00,
        1.6400e-01, 6.0700e-01, 8.5300e-01, 2.4000e-01, 9.6300e-01, 1.8100e-01,
        1.9700e-01, 7.7500e-01, 4.7610e+00, 2.4810e+00, 1.8780e+00, 2.2400e-01,
        5.1500e-01, 4.4300e-01, 1.5200e-01, 8.8500e-01, 3.3280e+00, 2.3670e+00,
        2.1120e+00, 2.7180e+00, 8.8400e-01, 5.9700e-01, 2.4320e+00, 3.0000e-03,
        1.8900e-01, 1.6410e+00, 5.1000e-01, 1.2780e+00, 7.2300e-01, 2.4810e+00,
        1.6890e+00, 1.2300e-01, 1.5700e+00, 3.2800e-01, 1.3960e+00, 1.0980e+00,
        2.1800e-01, 5.6800e-01, 3.6590e+00, 2.2800e-01, 7.4000e-01, 3.5300e-01,
        4.9100e-01, 5.5900e-01, 3.1030e+00, 2.0880e+00, 1.8070e+00, 2.7300e-01,
        2.5010e+00, 2.1500e+00, 1.2670e+00, 2.3620e+00, 3.4600e-01, 9.6700e-01,
        1.0130e+00, 5.1300e-01, 2.4450e+00, 1.4720e+00, 1.7050e+00, 2.4580e+00,
        1.7880e+00, 1.0970e+00, 2.1320e+00, 3.7200e-01, 6.6900e-01, 4.2870e+00,
        5.4000e-01, 6.0000e-03, 1.9600e+00, 2.4500e-01, 2.5530e+00, 4.1970e+00,
        2.1470e+00, 6.5000e-01, 6.2020e+00, 1.7500e-01, 8.8100e-01, 1.5400e-01,
        7.3200e-01, 2.4130e+00, 7.9900e-01, 1.1690e+00, 1.7320e+00, 2.6650e+00,
        1.4700e-01, 1.5270e+00, 1.0570e+00, 6.1200e-01, 1.1500e-01, 9.4900e-01,
        1.0270e+00, 1.0090e+00, 9.1300e-01, 1.5860e+00, 1.7800e-01, 3.1200e-01,
        9.9200e-01, 3.7000e-02, 2.4090e+00, 5.0430e+00, 2.0380e+00, 1.1090e+00,
        1.9490e+00, 1.5400e+00, 1.3470e+00, 2.0280e+00, 1.5890e+00, 2.9700e-01,
        1.4470e+00, 1.3040e+00, 2.4500e-01, 2.0720e+00, 1.2670e+00, 9.4000e-01,
        3.3090e+00, 9.1400e-01, 4.4200e-01, 2.4400e-01, 1.6000e-02, 1.5400e+00,
        4.9800e-01, 1.7500e+00, 1.5600e+00, 2.4960e+00, 7.1500e-01, 3.0630e+00,
        4.8850e+00, 7.5600e-01, 4.1900e-01, 2.8000e-01, 1.0510e+00, 5.3010e+00,
        2.8400e-01, 7.7300e-01, 6.0300e-01, 7.2600e-01, 2.6200e+00, 6.7700e-01,
        9.1300e-01, 4.1600e-01, 4.3500e-01, 1.0730e+00, 5.2600e-01, 3.0710e+00,
        6.3400e-01, 2.0540e+00, 1.7290e+00, 1.6770e+00, 2.3230e+00, 1.7610e+00,
        5.3300e-01, 1.1940e+00])

[ins] In [4]: x_data[:, 1].shape                                                                                                                                                                                                  
Out[4]: torch.Size([170])

[ins] In [5]: type(x_data[:, 1])                                                                                                                                                                                                  
Out[5]: torch.Tensor

[ins] In [6]: type(x_data)                                                                                                                                                                                                        
Out[6]: torch.Tensor

[ins] In [7]: x_data.shape                                                                                                                                                                                                        
Out[7]: torch.Size([170, 2])

[ins] In [8]: y_data                                                                                                                                                                                                              
Out[8]: 
tensor([ 7.4926,  8.2169,  9.9333,  9.4070,  7.7923,  9.2125, 10.1432, 10.2746,
         7.8520,  6.4324, 10.2148,  6.8661,  6.9062,  7.2992,  8.6960,  9.6758,
         9.7396,  8.5745,  8.4768,  8.6775,  7.7827,  8.8957,  9.6350,  8.9493,
         7.0458, 10.2142, 10.3143,  9.1177,  8.2760,  7.3624,  7.5405,  6.5053,
         6.8642,  8.7393,  7.4789,  8.4886,  9.0620,  9.9193,  9.6404, 10.1457,
         7.5401,  8.6881, 10.2664,  8.7657,  8.5975,  8.1237,  8.1882,  6.8155,
         9.9881,  9.1863,  6.4549, 10.1485,  8.5071, 10.1542,  8.7191, 10.1785,
         7.5393,  7.5458,  7.5887,  7.4548,  6.6625,  9.6284,  9.7638,  8.9275,
         8.2876,  8.3119, 10.1580,  7.8265,  9.1638,  7.4947,  9.4898,  8.0157,
         7.7895, 10.3265,  8.6702, 10.2726, 10.0799, 10.1264,  8.2026,  8.2550,
        10.1743,  8.4326,  6.9263,  7.3524,  7.5278,  9.3259,  9.6911,  9.6778,
         7.3588,  8.3467,  8.6342,  8.1958,  7.6604,  9.0788, 10.9646,  8.9751,
         9.8299,  8.1645,  7.1940,  6.7157,  9.1101,  8.7094,  6.6588,  9.8122,
         7.3905,  6.7764,  7.4554,  9.1719,  6.3737,  9.0968,  8.7091, 10.0051,
         6.5556,  6.7829,  8.0949, 10.2615, 10.4402,  7.1876,  9.8840,  9.4517,
         7.5629,  8.7265,  8.4601,  8.3009,  7.7518,  9.2497, 10.0097,  9.8122,
         8.4236, 10.1080,  8.6809,  8.8672,  6.9462,  9.4234,  7.4281,  7.2690,
        10.0695,  7.5297,  6.1456,  8.4326,  9.3329,  9.7335, 10.1620,  8.4514,
         9.7958,  8.0840,  6.7107,  7.2702,  8.7450,  6.6663,  8.2073,  8.7901,
         9.1016,  8.7406,  8.7811,  6.2573,  7.1257,  8.3209,  9.0804, 10.4332,
         7.3236,  8.5820,  8.6456,  7.6068,  8.0622,  8.4888,  6.6692,  9.1505,
         6.6516,  7.8237])

[ins] In [9]: y_data.shape                                                                                                                                                                                                        
Out[9]: torch.Size([170])

[ins] In [10]: type(y_data)                                                                                                                                                                                                       
Out[10]: torch.Tensor


